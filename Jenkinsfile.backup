pipeline {
    // Ce script utilise la méthode declarative pour les pipelines
    // @see https://www.lambdatest.com/blog/jenkins-declarative-pipeline-examples/
    // ---------------------------------------------------------------------------
    agent none
    environment {
        PROJECT_NAME = "MQTT-leds-color"
        JENKINNS_JOB_NAME = "compilationPourArduino"
    }
	stages {
		stage('Récupération de la version du code (git tag)') {
			steps {
				script {
					latestTag = sh(returnStdout:  true, script: "git tag --sort=-creatordate | head -n 1").trim()
					env.BUILD_VERSION = latestTag
					echo '*****************************************************************************'
					echo "env-BUILD_VERSION"
					echo "${env.BUILD_VERSION}"
					echo '*****************************************************************************'
				}
			}
		}
        stage('Nettoyage du répertoire pour la compilation (VM compilation)') {
            agent { label 'vagrant'}
            steps {
                script{
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        deleteDir()
                    }
                }
            }
        }
        stage('Download sources sur VM compilation') {
            agent { label 'vagrant'}
            steps {
                script{
                    sh 'git clone https://git.alex-design.fr/Alex/$PROJECT_NAME'
                }
            }
        }
        stage("Compilation (VM compilation)"){
            agent { label 'vagrant'}
            steps {
                script{
                    dir("${PROJECT_NAME}" ){
                        sh 'arduino-cli compile --fqbn esp8266:esp8266:nodemcuv2 ${PROJECT_NAME}.ino --output-dir /partage'
                    }
                }
            }
        }
        stage("Déplacement du binaire de VM compilation vers host"){
            agent { label 'host'}
            steps {
                script {
                    sh 'mv /tmp/workspace/VagrantArduino/partage/${PROJECT_NAME}.ino.bin /partage'
                    sh 'chown alexandre.alexandre /partage/${PROJECT_NAME}.ino.bin'
                }
            }
        }
        stage("Import des scripts de génération pour le site web (VM Alexdesign)"){
            agent { label 'alexdesign'}
            steps {
                script {
                    deleteDir()
                    sh 'git clone https://git.alex-design.fr/Alex/jenkinsWebProject.git'
                    sh 'chown -R alexandre.alexandre jenkinsWebProject/'
                    sh 'mkdir -p /data/www/html/update/$PROJECT_NAME'
                    sh 'sudo chown alexandre.alexandre -R /data/www/html/update/$PROJECT_NAME'

                    // test si le répertoire destination existe déjà
                    echo '*****************************************************************************'
                    def fileName = "/var/www/html/update/$PROJECT_NAME/themes"
                    if ( !fileExists(fileName) ) {
                        echo "Déplacement des fichiers générant la page web"
                        sh 'mv -fu ./jenkinsWebProject/* /data/www/html/update/$PROJECT_NAME/'
                    } else {
                        echo "Les fichiers générant la page web existent déjà, on ne trannsfère que le générateur, pas le theme (il peut avoir été customisé)."
                        sh 'mv -fu ./jenkinsWebProject/index.php /data/www/html/update/$PROJECT_NAME/'
                        sh 'mv -fu ./jenkinsWebProject/templateDATA.php /data/www/html/update/$PROJECT_NAME/'
                    }
                    echo '*****************************************************************************'
                }
            }
        }
        stage("Transfère du README dans le site web (VM Alexdesign)"){
            agent { label 'alexdesign'}
            steps {
                script{
                    sh 'mkdir -p /data/www/html/update/$PROJECT_NAME/bin'
                    sh 'mkdir -p /data/www/html/update/$PROJECT_NAME/inc'
                    sh 'git clone https://git.alex-design.fr/Alex/$PROJECT_NAME'
                    sh 'mv -fu ./$PROJECT_NAME/README.md /data/www/html/update/$PROJECT_NAME/inc/'

                    def fileName = "./$PROJECT_NAME/doc"
                    if ( !fileExists(fileName) ) {
                        sh 'rm -rf /data/www/html/update/$PROJECT_NAME/doc'
                        sh 'mv -fu ./$PROJECT_NAME/doc /data/www/html/update/$PROJECT_NAME/'
                    }
                }
            }
        }
        stage("Déplacement du binaire vers le site web (VM Alexdesign)"){
            agent { label 'alexdesign'}
            steps {
                script{
                    dir("/data/www/html/update/$PROJECT_NAME/bin"){
                        sh 'cp /partage/${PROJECT_NAME}.ino.bin ./'
                        sh "mv -fu ${PROJECT_NAME}.ino.bin ${PROJECT_NAME}__${env.BUILD_NUMBER}.bin"
                    }
                }
            }
        }
        stage("Extraction des infos de README vers la page HTML"){
            agent { label 'alexdesign'}
            steps {
                script{
                    dir("/data/www/html/update/$PROJECT_NAME/inc"){
                        sh 'pandoc -s README.md  --template ../templateDATA.php -o data.php'
                    }
                }
            }
        }
        stage("Ajustement des droits pour apache sur le le site web (VM Alexdesign)"){
            agent { label 'alexdesign'}
            steps {
                script{
                    sh 'sudo chown apache.apache -R /data/www/html/update/$PROJECT_NAME'
                }
            }
        }
    }
}
